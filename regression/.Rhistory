# Введем пороги (квантили для 0.0, 0.2, 0.4, 0.6, 0.8)
mu <- c(4.03, 40.01, 46.0, 52.09, 60.02)
# Бинаризуем индекст стабильность по порогам
score_labels <- rep(0, n)
score_labels[(data$Score > mu[1]) & (data$Score <= mu[2])] <- 0
score_labels[(data$Score > mu[2]) & (data$Score <= mu[3])] <- 1
score_labels[(data$Score > mu[3]) & (data$Score <= mu[4])] <- 2
score_labels[(data$Score > mu[4]) & (data$Score <= mu[5])] <- 3
score_labels[(data$Score > mu[5])] <- 4
score_labels <- matrix(score_labels, ncol = 1)           # приводим к нужному формату
data$score_labels <- score_labels                        # добавим в датафрейм переменную
summary(as.factor(data$score_labels))                    # посмотрим доли
# Перемешиваем данные
data = data[sample(1:n),]
# Посмотрим на данные
head(data, 5)
# все регрессоры
linear_model_0 = lm(Score ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA + ROE +
NPL_Ratio + Debt_TotalAssets + Deposits_TotalAssets +
TotalLoans_TotalAssets + LDR + LiquidAssetsRatio + Z_score +
LoansLE_TotalAssets +
AttractedMbcs_TotalAssets + Capital_assets + gos_sobstv + foreign +
system + law + strategy + nationhood +
news_cluster + A_Shares + A_Promissory_notes +
A_bonds + A_capitals + A_corporate_loans + A_individuals_loans +
A_loro_loans + A_fixed_assets + A_Mbcs +
P_deposits_individuals + P_corporate_funds + P_accounts_individuals +
P_bonds_promissory_notes + P_capitals,
data=data)
summary(linear_model_0)
summary(linear_model_0)$r.squared
vif_0 = as.matrix(vif(linear_model_0))
write.csv(vif_0, file="vif_before.csv")
# убираем взаимозаменяемые регрессоры
linear_model_1 = lm(Score ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + nationhood + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data=data)
summary(linear_model_1)
summary(linear_model_1)$r.squared
vif_1 = as.matrix(vif(linear_model_1))
write.csv(vif_1, file="vif_after.csv")
write.csv(summary(linear_model_1)$coefficients, 'lm_coef.csv')
# Воспользуемся пробит модель, предварительно перекодировав индекс стабильности
data$score_binary <- as.numeric(data$score_labels >= 3)
model_probit <- glm(formula = score_binary ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA + Debt_TotalAssets +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data,
family = binomial(link = "probit"))
summary(model_probit)
write.csv(summary(model_probit) $coefficients, 'probit_coef.csv')
# Проведем тест Бранта для проверки parallel assumption
model_oprobit <- polr(formula = as.factor(score_labels) ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data,
method = "probit")
summary(model_oprobit)
brant(model_oprobit)
# Применим порядковую пробит модель
model_orprobit = mvoprobit(score_labels ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data)
summary(model_orprobit)
# Применим порядковую логит модель
model_orlogit = mvoprobit(score_labels ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data,
marginal = list(logistic = NULL))
summary(model_orlogit)
# Оценим порядклвую полупараметрическую модель
model_orsemi = mvoprobit(score_labels ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data,
marginal = list(hpa = 3))
summary(model_orsemi)
# Оценим порядклвую полупараметрическую модель
model_orsemi = mvoprobit(score_labels ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data,
marginal = list(hpa = 3))
summary(model_orsemi)
c(probit = AIC(model_orprobit), logit = AIC(model_orlogit))
c(probit = BIC(model_orprobit), logit = BIC(model_orlogit))
c(probit = logLik(model_orprobit), logit = logLik(model_orlogit))
summary(model_orprobit)
# Применим порядковую логит модель
model_orlogit = mvoprobit(score_labels ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data,
marginal = list(logistic = NULL))
summary(model_orlogit)
# Воспользуемся пробит модель, предварительно перекодировав индекс стабильности
data$score_binary <- as.numeric(data$score_labels >= 3)
model_probit <- glm(formula = score_binary ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA + Debt_TotalAssets +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data,
family = binomial(link = "probit"))
summary(model_probit)
write.csv(summary(model_probit) $coefficients, 'probit_coef.csv')
# Воспользуемся пробит модель, предварительно перекодировав индекс стабильности
data$score_binary <- as.numeric(data$score_labels >= 3)
model_probit <- glm(formula = score_binary ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data,
family = binomial(link = "probit"))
summary(model_probit)
write.csv(summary(model_probit) $coefficients, 'probit_coef.csv')
c(orprobit = AIC(model_orprobit), orlogit = AIC(model_orlogit), binprobit = AIC(model_probit), lm = AIC(linear_model_1))
c(orprobit = BIC(model_orprobit), orlogit = BIC(model_orlogit), binprobit = BIC(model_probit), lm = BIC(linear_model_1))
summary(linear_model_1)
# убираем взаимозаменяемые регрессоры
linear_model_1 = lm(Score ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data=data)
summary(linear_model_1)
summary(linear_model_1)$r.squared
vif_1 = as.matrix(vif(linear_model_1))
write.csv(summary(linear_model_1)$coefficients, 'lm_coef.csv')
write.csv(summary(linear_model_1)$coefficients, 'lm_coef.csv')
model_probit <- glm(formula = score_binary ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data,
family = binomial(link = "probit"))
summary(model_probit)
# Проведем тест Бранта для проверки parallel assumption
model_oprobit <- polr(formula = as.factor(score_labels) ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data,
method = "probit")
summary(model_oprobit)
# Применим порядковую пробит модель
model_orprobit = mvoprobit(score_labels ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data)
summary(model_orprobit)
# Применим порядковую логит модель
model_orlogit = mvoprobit(score_labels ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data,
marginal = list(logistic = NULL))
summary(model_orlogit)
# porfolio_cluster
data.porfolio_cluster = data
data.porfolio_cluster$porfolio_cluster_1 = 0
data.porfolio_cluster$porfolio_cluster_2 = 0
data.porfolio_cluster$porfolio_cluster_3 = 0
data.porfolio_cluster$porfolio_cluster_4 = 0
# Применим порядковую логит модель
model_orlogit = mvoprobit(score_labels ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data,
marginal = list(logistic = NULL))
summary(model_orlogit)
# убираем взаимозаменяемые регрессоры
linear_model_1 = lm(Score ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data=data)
summary(linear_model_1)
# Воспользуемся пробит модель, предварительно перекодировав индекс стабильности
data$score_binary <- as.numeric(data$score_labels >= 3)
model_probit <- glm(formula = score_binary ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data,
family = binomial(link = "probit"))
summary(model_probit)
# Применим порядковую пробит модель
model_orprobit = mvoprobit(score_labels ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data)
summary(model_orprobit)
# Применим порядковую логит модель
model_orlogit = mvoprobit(score_labels ~ nps_cluster_1 + nps_cluster_2 +
porfolio_cluster_1 + porfolio_cluster_2 + porfolio_cluster_3 + porfolio_cluster_4 +
fin_cluster_1 + fin_cluster_2 + fin_cluster_3 + fin_cluster_4 + fin_cluster_5 +
law + securities + strategy +
Н1_CAR + Н2_liquidity + Н3_liquidity + ROA +
TotalLoans_TotalAssets + Z_score +
gos_sobstv + foreign + system + A_Shares +
A_bonds + A_capitals + A_loro_loans + A_fixed_assets +
P_deposits_individuals + P_corporate_funds + P_capitals,
data = data,
marginal = list(logistic = NULL))
summary(model_orlogit)
# porfolio_cluster
data.porfolio_cluster = data
data.porfolio_cluster$porfolio_cluster_1 = 0
data.porfolio_cluster$porfolio_cluster_2 = 0
data.porfolio_cluster$porfolio_cluster_3 = 0
data.porfolio_cluster$porfolio_cluster_4 = 0
ame.p1_g0 <- mean(predict(model_orlogit, group = 0, type = "prob",
me = "porfolio_cluster_1", eps = c(0, 1),
newdata = data.porfolio_cluster))
ame.p1_g1 <- mean(predict(model_orlogit, group = 1, type = "prob",
me = "porfolio_cluster_1", eps = c(0, 1),
newdata = data.porfolio_cluster))
ame.p1_g2 <- mean(predict(model_orlogit, group = 2, type = "prob",
me = "porfolio_cluster_1", eps = c(0, 1),
newdata = data.porfolio_cluster))
ame.p1_g3 <- mean(predict(model_orlogit, group = 3, type = "prob",
me = "porfolio_cluster_1", eps = c(0, 1),
newdata = data.porfolio_cluster))
ame.p1_g4 <- mean(predict(model_orlogit, group = 4, type = "prob",
me = "porfolio_cluster_1", eps = c(0, 1),
newdata = data.porfolio_cluster))
ame.p2_g0 <- mean(predict(model_orlogit, group = 0, type = "prob",
me = "porfolio_cluster_2", eps = c(0, 1),
newdata = data.porfolio_cluster))
ame.p2_g1 <- mean(predict(model_orlogit, group = 1, type = "prob",
me = "porfolio_cluster_2", eps = c(0, 1),
newdata = data.porfolio_cluster))
ame.p2_g2 <- mean(predict(model_orlogit, group = 2, type = "prob",
me = "porfolio_cluster_2", eps = c(0, 1),
newdata = data.porfolio_cluster))
ame.p2_g3 <- mean(predict(model_orlogit, group = 3, type = "prob",
me = "porfolio_cluster_2", eps = c(0, 1),
newdata = data.porfolio_cluster))
ame.p2_g4 <- mean(predict(model_orlogit, group = 4, type = "prob",
me = "porfolio_cluster_2", eps = c(0, 1),
newdata = data.porfolio_cluster))
ame.p1_g0
ame.p1_g1
ame.p1_g2
ame.p1_g3
ame.p1_g4
ame.p2_g0
ame.p2_g1
ame.p2_g2
ame.p2_g3
ame.p2_g4
ame.f4_g0
# fin_cluster
data.fin_cluster = data
data.fin_cluster$fin_cluster_1 = 0
data.fin_cluster$fin_cluster_2 = 0
data.fin_cluster$fin_cluster_3 = 0
data.fin_cluster$fin_cluster_4 = 0
data.fin_cluster$fin_cluster_5 = 0
ame.f4_g0 <- mean(predict(model_orlogit, group = 0, type = "prob",
me = "fin_cluster_4", eps = c(0, 1),
newdata = data.fin_cluster))
ame.f4_g1 <- mean(predict(model_orlogit, group = 1, type = "prob",
me = "fin_cluster_4", eps = c(0, 1),
newdata = data.fin_cluster))
ame.f4_g2 <- mean(predict(model_orlogit, group = 2, type = "prob",
me = "fin_cluster_4", eps = c(0, 1),
newdata = data.fin_cluster))
ame.f4_g3 <- mean(predict(model_orlogit, group = 3, type = "prob",
me = "fin_cluster_4", eps = c(0, 1),
newdata = data.fin_cluster))
ame.f4_g4 <- mean(predict(model_orlogit, group = 4, type = "prob",
me = "fin_cluster_4", eps = c(0, 1),
newdata = data.fin_cluster))
ame.f5_g0 <- mean(predict(model_orlogit, group = 0, type = "prob",
me = "fin_cluster_5", eps = c(0, 1),
newdata = data.fin_cluster))
ame.f5_g1 <- mean(predict(model_orlogit, group = 1, type = "prob",
me = "fin_cluster_5", eps = c(0, 1),
newdata = data.fin_cluster))
ame.f5_g2 <- mean(predict(model_orlogit, group = 2, type = "prob",
me = "fin_cluster_5", eps = c(0, 1),
newdata = data.fin_cluster))
ame.f5_g3 <- mean(predict(model_orlogit, group = 3, type = "prob",
me = "fin_cluster_5", eps = c(0, 1),
newdata = data.fin_cluster))
ame.f5_g4 <- mean(predict(model_orlogit, group = 4, type = "prob",
me = "fin_cluster_5", eps = c(0, 1),
newdata = data.fin_cluster))
ame.f4_g0
ame.f4_g1
ame.f4_g2
ame.f4_g3
ame.f4_g4
ame.f5_g0
ame.f5_g1
ame.f5_g2
ame.f5_g3
ame.f5_g4
# securities
ame.sec_g0 <- mean(predict(model_orlogit, group = 0, type = "prob", me = "securities"))
ame.sec_g1 <- mean(predict(model_orlogit, group = 1, type = "prob", me = "securities"))
ame.sec_g2 <- mean(predict(model_orlogit, group = 2, type = "prob", me = "securities"))
ame.sec_g3 <- mean(predict(model_orlogit, group = 3, type = "prob", me = "securities"))
ame.sec_g4 <- mean(predict(model_orlogit, group = 4, type = "prob", me = "securities"))
ame.sec_g0
ame.sec_g0
ame.sec_g1
ame.sec_g2
ame.sec_g3
ame.sec_g4
me.cl.fn <- function(object, group, me)
{
val <- mean(predict(object, group = group, type = "prob",
me = me, eps = c(0, 1),
newdata = data.fin_cluster))
return(val)
}
me.cl.test.p1_g0 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(0, "porfolio_cluster_1"))
summary(me.cl.test.p1_g0)
me.cl.test.p1_g1 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(1, "porfolio_cluster_1"))
summary(me.cl.test.p1_g1)
me.cl.test.p1_g2 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(2, "porfolio_cluster_1"))
summary(me.cl.test.p1_g2)
me.cl.test.p1_g3 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(3, "porfolio_cluster_1"))
summary(me.cl.test.p1_g3)
me.cl.test.p1_g4 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(4, "porfolio_cluster_1"))
summary(me.cl.test.p1_g4)
me.cl.test.p2_g0 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(0, "porfolio_cluster_2"))
summary(me.cl.test.p2_g0)
me.cl.test.p2_g1 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(1, "porfolio_cluster_2"))
summary(me.cl.test.p2_g1)
me.cl.test.p2_g2 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(2, "porfolio_cluster_2"))
summary(me.cl.test.p2_g2)
me.cl.test.p2_g3 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(3, "porfolio_cluster_2"))
summary(me.cl.test.p2_g3)
me.cl.test.p2_g4 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(4, "porfolio_cluster_2"))
summary(me.cl.test.p2_g4)
me.cl.fn <- function(object, group, me)
{
val <- mean(predict(object, group = group, type = "prob",
me = me, eps = c(0, 1),
newdata = data.porfolio_cluster))
return(val)
}
me.cl.test.f4_g0 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(0, "fin_cluster_4"))
summary(me.cl.test.f4_g0)
me.cl.test.f4_g1 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(1, "fin_cluster_4"))
summary(me.cl.test.f4_g1)
me.cl.test.f4_g2 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(2, "fin_cluster_4"))
summary(me.cl.test.f4_g2)
me.cl.test.f4_g3 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(3, "fin_cluster_4"))
summary(me.cl.test.f4_g3)
me.cl.test.f4_g4 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(4, "fin_cluster_4"))
summary(me.cl.test.f4_g4)
me.cl.test.f5_g0 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(0, "fin_cluster_5"))
summary(me.cl.test.f5_g0)
me.cl.test.f5_g1 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(1, "fin_cluster_5"))
summary(me.cl.test.f5_g1)
me.cl.test.f5_g2 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(2, "fin_cluster_5"))
summary(me.cl.test.f5_g2)
me.cl.test.f5_g3 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(3, "fin_cluster_5"))
summary(me.cl.test.f5_g3)
me.cl.test.f5_g4 <- delta_method(model_orlogit, fn = me.cl.fn, fn_args =list(4, "fin_cluster_5"))
summary(me.cl.test.f5_g4)
me.sec.test.g0 <- delta_method(model_orlogit, fn = me.sec.fn, fn_args =list(0))
summary(me.sec.test.g0)
me.sec.test.g1 <- delta_method(model_orlogit, fn = me.sec.fn, fn_args =list(1))
summary(me.sec.test.g1)
me.sec.test.g2 <- delta_method(model_orlogit, fn = me.sec.fn, fn_args =list(2))
me.sec.fn <- function(object, group)
{
val <- mean(predict(object, group = group, type = "prob", me = 'securities'))
return(val)
}
me.sec.test.g0 <- delta_method(model_orlogit, fn = me.sec.fn, fn_args =list(0))
summary(me.sec.test.g0)
me.sec.test.g1 <- delta_method(model_orlogit, fn = me.sec.fn, fn_args =list(1))
summary(me.sec.test.g1)
me.sec.test.g2 <- delta_method(model_orlogit, fn = me.sec.fn, fn_args =list(2))
summary(me.sec.test.g2)
me.sec.test.g3 <- delta_method(model_orlogit, fn = me.sec.fn, fn_args =list(3))
summary(me.sec.test.g3)
me.sec.test.g4 <- delta_method(model_orlogit, fn = me.sec.fn, fn_args =list(4))
summary(me.sec.test.g4)
data
data[data['score_labels '] == 5]
fn_test = function(object)
{
coef_val = coef(object, eq = 1)
val = coef_val["porfolio_cluster_1"] - coef_val["porfolio_cluster_2"]
return(val)
}
test.1 <- delta_method(model_orprobit, fn = fn_test)
summary(test.1)
test.1 <- delta_method(model_orlogit, fn = fn_test)
summary(test.1)
test.1 <- delta_method(model_orsemi, fn = fn_test)
summary(test.1)
